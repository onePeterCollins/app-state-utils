"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.logState=void 0;var _typeof2=_interopRequireDefault(require("@babel/runtime/helpers/typeof"));/**
 * @author Peter Collins - https://github.com/onepetercollins
 * 
 * @fileoverview : Exports a function: logState(state, payload)
 * 
 * @function logState : To log current state or a selected part of it to the console for inspection.
 * 
 * @param   {Object}   state Current state.
 * @param   {Object}   payload { name: String, child: Array }
 * @param   {String}   payload.name Name of the key to log or second object in the nesting hieriarchy.
 * @param   {Array}    payload.child Array of strings pointing to the nested value to log.
 * @returns {Function} (local function) (payload) => : Current app state, it does not alter the state.
 */

var logState=function logState(state,payload){

/**
     * @param   {Object} payload { name: String, child: Array }
     * @param   {String} payload.name Name of the key to log or second object in the nesting hieriarchy.
     * @param   {Array}  payload.child Array of strings pointing to the nested value to log.
     * @returns {Object} { state } : Current app state, it does not alter the state.
     */

return function(){var payloadInherited=arguments.length>0&&arguments[0]!==undefined?arguments[0]:payload||{name:null,child:[]};
var currentState=JSON.parse(JSON.stringify(state));
var name=payloadInherited.name,child=payloadInherited.child;
var nameField=name;
var children=child;
var testArray=state?Array.from(state):null;
var snapshots=[];
var date=new Date();
var pathString="state.".concat(nameField);

if((0,_typeof2.default)(state)!=='object'||state[state.length-1]===testArray.pop()&&typeof testArray.pop()!=="undefined"){
console.error("[state] must be a valid javascript object");
return state;
}

if((0,_typeof2.default)(children)==="object")/* check if 'children' is an empty array and nullify it */{
if(children.length===0&&typeof children[children.length-1]==="undefined"){
children=null;
}
}

if(!payloadInherited.name){
console.log("\n app state @ ".concat(date.getHours(),":").concat(date.getMinutes(),":").concat(date.getSeconds()));
console.log(state);
return state;
}else{
if(!children&&!currentState.hasOwnProperty(nameField)){
console.error("The referenced property '".concat(nameField,"' does not exist in current state."));
return state;
}else if(!children&&currentState.hasOwnProperty(nameField))/* log state to console */{
console.log("\n                    \n app state @ ".concat(
date.getHours(),":").concat(date.getMinutes(),":").concat(date.getSeconds(),"\n                    \n ").concat(
pathString," :\n                "));

console.log(state[nameField]);
return state;
}else if(children.length){
for(var index=0;index<children.length;index++){
if(!snapshots.length){
pathString+=".".concat(children[index]);

if(index===children.length-1){
console.log("\n                                \n app state @ ".concat(
date.getHours(),":").concat(date.getMinutes(),":").concat(date.getSeconds(),"\n                                \n ").concat(
pathString," :\n                            "));

console.log(state[nameField][children[index]]);
}else{
snapshots.push(state[nameField][children[index]]);
}
}else{
pathString+=".".concat(children[index]);

if(index!==children.length-1){
snapshots.push(snapshots[snapshots.length-1][children[index]]);
}else{
snapshots.push(snapshots[snapshots.length-1][children[index]]);

console.log("\n                                \n app state @ ".concat(
date.getHours(),":").concat(date.getMinutes(),":").concat(date.getSeconds(),"\n                                \n ").concat(
pathString," :\n                            "));

console.log(snapshots[snapshots.length-1]);
}
}
}
return state;
}
}
};
};exports.logState=logState;
//# sourceMappingURL=data:application/json;charset=utf-8;base64, 
