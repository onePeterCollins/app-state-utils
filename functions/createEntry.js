"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.createEntry=void 0;var _typeof2=_interopRequireDefault(require("@babel/runtime/helpers/typeof"));/**
 * @author Peter Collins - https://github.com/onepetercollins
 * 
 * @fileoverview : Exports a function: createEntry(state, payload)
 * 
 * @function createEntry : For creating new [key: value] pairs in app state.
 *                         This function can be used to dynamically create infinitely nested [key: value] pairs.
 *                         It takes current state and a payload object as arguments.
 *                         It returns a local function which returns updated state.
 * 
 * @param   {Object}   state The object to be mutated.
 * @param   {Object}   payload { name: String, value: any, child: Array }
 * @param   {String}   payload.name Name of the key to be created or second object in the nesting hieriarchy.
 * @param   {any}      payload.value Value to be assigned to newly created key.
 * @param   {Array}    payload.child Array of strings pointing to the nested key to be created.
 * @returns {Function} (local function) (payload) => : The new app state, or current state if it was not altered.
 */

var createEntry=function createEntry(state,payload){

/**
     * @param   {Object} payload { name: String, value: any, child: Array }
     * @param   {String} payload.name Name of the key to be created or second object in the nesting hieriarchy.
     * @param   {any}    payload.value Value to be assigned to newly created key.
     * @param   {Array}  payload.child Array of strings pointing to the nested key to be created.
     * @returns {Object} { updatedState } : The new app state, or current state if it was not altered.
     */

return function(){var payloadInherited=arguments.length>0&&arguments[0]!==undefined?arguments[0]:payload;
var currentState=JSON.parse(JSON.stringify(state));
var updatedState=null;
var name=payloadInherited.name,value=payloadInherited.value,child=payloadInherited.child;
var nameField=name;
var children=child;
var testArray=state?Array.from(state):null;
var snapshots=[];

if((0,_typeof2.default)(state)!=='object'||state[state.length-1]===testArray.pop()&&typeof testArray.pop()!=="undefined"){
console.error("[state] must be a valid javascript object");
return state;
}

if((0,_typeof2.default)(children)==="object")/* check if 'children' is an empty array and nullify it */{
if(children.length===0&&typeof children[children.length-1]==="undefined"){
children=null;
}
}

if(!children&&currentState[nameField])/* warn if current state has key that corresponds with new key*/{
console.warn("'".concat(nameField,"' key already exists in state."));

if(value===currentState[nameField])/* warn if current state value corresponds with new value*/{
console.warn('State is already up to date.');
return state;
}else{
if((0,_typeof2.default)(value)!==(0,_typeof2.default)(currentState[nameField]))/* prevent unauthorized type changes */{
console.error("\n                        \n State update failed,\n                        \n You are attempting to perform unauthorized type changes.\n                        \n Pass 'false' to the (staticType) parameter of the 'updateValue()' function to allow type changes.\n                    ");




return state;
}else/* update value and return state if state has corresponding key with different value */{
Object.assign(currentState,state);
currentState[nameField]=value;
updatedState=currentState;
return updatedState;
}
}
}else if(!children&&!currentState[nameField]){
if(currentState.hasOwnProperty(nameField)){
console.warn("'".concat(nameField,"' key already exists in state."));

if(value===currentState[nameField])/* warn if current state value corresponds with new value*/{
console.warn('State is already up to date.');
return state;
}else{
if((0,_typeof2.default)(value)!==(0,_typeof2.default)(currentState[nameField]))/* prevent unauthorized type changes */{
console.error("\n                            \n State update failed,\n                            \n You are attempting to perform unauthorized type changes.\n                            \n Pass 'false' to the (staticType) parameter of the 'updateValue()' function to allow type changes.\n                        ");




return state;
}else/* update value and return state if state has corresponding key with different value */{
Object.assign(currentState,state);
currentState[nameField]=value;
updatedState=currentState;
return updatedState;
}
}
}else{
Object.assign(currentState,state);
currentState[nameField]=value;
updatedState=currentState;
return updatedState;
}
}else if(children.length&&value!==currentState[nameField]){
for(var index=0;index<children.length;index++){
if(!snapshots.length){
if(typeof currentState[nameField]==="undefined"){
if(index===children.length-1){
currentState[nameField]={};
currentState[nameField][children[index]]=value;
snapshots.push(currentState[nameField][children[index]]);
}else{
currentState[nameField]={};
currentState[nameField][children[index]]={};
snapshots.push(currentState[nameField][children[index]]);
}
}else{
if(typeof currentState[nameField][children[index]]==="undefined"){
if(index===children.length-1){
currentState[nameField][children[index]]=value;
snapshots.push(currentState[nameField][children[index]]);
}else{
currentState[nameField][children[index]]={};
snapshots.push(currentState[nameField][children[index]]);
}
}else{
if(index===children.length-1){
if((0,_typeof2.default)(currentState[nameField][children[index]])!==(0,_typeof2.default)(value))/* prevent unauthorized type changes */{
console.error("\n                                        \n State update failed,\n                                        \n You are attempting to perform unauthorized type changes.\n                                        \n Pass 'false' to the (staticType) parameter of the 'updateValue()' function to allow type changes.\n                                    ");




return state;
}else{
currentState[nameField][children[index]]=value;
snapshots.push(currentState[nameField][children[index]]);
}
}else{
snapshots.push(currentState[nameField][children[index]]);
}
}
}
}else{
if(index===children.length-1){
snapshots[snapshots.length-1][children[index]]=value;
snapshots.push(snapshots[snapshots.length-1][children[index]]);
}

if(typeof snapshots[snapshots.length-1][children[index]]!=="undefined"){
if(index!==children.length-1){
snapshots.push(snapshots[snapshots.length-1][children[index]]);
}
}else{
if(index!==children.length-1){
snapshots[snapshots.length-1][children[index]]={};
snapshots.push(snapshots[snapshots.length-1][children[index]]);
}
}
}

if(index===children.length-1){
for(var index0=snapshots.length-1;index0>=0;index0--){
if(index0!==snapshots.length-1){
snapshots[index0][children[index0+1]]=snapshots[index0+1];
}

if(index0===0){
Object.assign(currentState,state);
currentState[nameField][children[index0]]=snapshots[index0];
updatedState=currentState;
return updatedState;
}
}
}
}
}else{
Object.assign(currentState,state);
return currentState;
}
};
};exports.createEntry=createEntry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64, 
