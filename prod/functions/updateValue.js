"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.updateValue=void 0;var _typeof2=_interopRequireDefault(require("@babel/runtime/helpers/typeof"));/**
 * @author Peter Collins - https://github.com/onepetercollins
 * 
 * @fileoverview : Exports a function: updateValue(state, payload, staticType)
 * 
 * @function updateValue : For state drilling and surgical state updates.
 *                         This function can be used to dynamically set infinitely nested object values.
 *                         It takes current state, a payload object, and an optional boolean value as arguments.
 *                         It returns a local function which returns updated state.
 * 
 * @param   {Object}   state The object to be mutated.
 * @param   {Object}   payload { name: String, newValue: any, child: Array }
 * @param   {String}   payload.name Name of the key to be mutated or second object in the nesting hieriarchy.
 * @param   {any}      payload.newValue New value to be inserted.
 * @param   {Array}    payload.child Array of strings pointing to the nested key to be mutated.
 * @param   {Boolean}  staticType Pass 'false' to turn off console error when altering data types.
 * @returns {Function} (local function) (payload, staticType) => : The new app state, or current state if it was not altered.
 */

var updateValue=function updateValue(state,payload){var staticType=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;

/**
     * @param   {Object}  payload { name: String, newValue: any, child: Array }
     * @param   {String}  payload.name Name of the key to be mutated or second object in the nesting hieriarchy.
     * @param   {any}     payload.newValue New value to be inserted.
     * @param   {Array}   payload.child Array of strings pointing to the nested key to be mutated.
     * @param   {Boolean} staticType Pass 'false' to turn off console error when altering data types.
     * @returns {Object}  { updatedState } : The new app state, or current state if it was not altered.
     */

return function(){var payloadInherited=arguments.length>0&&arguments[0]!==undefined?arguments[0]:payload;var staticTypeInherited=arguments.length>1&&arguments[1]!==undefined?arguments[1]:staticType;
var currentState=JSON.parse(JSON.stringify(state));
var updatedState=null;
var name=payloadInherited.name,newValue=payloadInherited.newValue,child=payloadInherited.child;
var nameField=name;
var children=child;
var testArray=state?Array.from(state):null;
var snapshots=[];
var staticDataType=staticTypeInherited?true:false;

if((0,_typeof2.default)(state)!=='object'||state[state.length-1]===testArray.pop()&&typeof testArray.pop()!=="undefined"){
console.error("[state] must be a valid javascript object");
return state;
}

if((0,_typeof2.default)(children)==="object")/* check if 'children' is an empty array and nullify it */{
if(children.length===0&&typeof children[children.length-1]==="undefined"){
children=null;
}
}

if(!children&&!currentState.hasOwnProperty(nameField)){
console.error("The referenced property '".concat(nameField,"' does not exist in current state."));
return state;
}

if(!children&&newValue===currentState[nameField])/* warn if current state value corresponds with new value*/{
console.warn('State is already up to date.');
return state;
}else if(!children.length&&newValue!==currentState[nameField]){
if((0,_typeof2.default)(newValue)!==(0,_typeof2.default)(currentState[nameField])&&staticDataType)/* prevent unauthorized type changes */{
console.error("\n                    \n State update failed,\n                    \n You are attempting to perform unauthorized type changes.\n                    \n Pass 'false' to the (staticType) parameter of the 'updateValue()' function to allow type changes.\n                ");




return state;
}else/* update and return state */{
Object.assign(currentState,state);
currentState[nameField]=newValue;
updatedState=currentState;
return updatedState;
}
}else if(children.length&&newValue!==currentState[nameField]){
for(var index=0;index<children.length;index++){
if(!snapshots.length){
if(typeof currentState[nameField][children[index]]!=="undefined"){
snapshots.push(currentState[nameField][children[index]]);
}else{
console.error("The referenced property '".concat(nameField,"' does not exist in current state."));
return state;
}
}else{
if(typeof snapshots[snapshots.length-1][children[index]]!=="undefined"){
snapshots.push(snapshots[snapshots.length-1][children[index]]);
}else{
console.error("The referenced property '".concat(nameField,"' does not exist in current state."));
return state;
}
}

if(index===children.length-1){
if(newValue===snapshots[snapshots.length-1])/* warn if current state value corresponds with new value*/{
console.warn('State is already up to date.');
return state;
}else{
if((0,_typeof2.default)(newValue)!==(0,_typeof2.default)(snapshots[snapshots.length-1])&&staticDataType)/* prevent unauthorized type changes */{
console.error("\n                                State update failed,\n                                \n You are attempting to perform unauthorized type changes.\n                                \n Pass 'false' to the (staticType) parameter of the 'updateValue()' function to allow type changes.\n                            ");




return null;
}else/* update and return state */{
for(var index0=snapshots.length-1;index0>=0;index0--){
if(index0===snapshots.length-1){
snapshots[index0]=newValue;
}else{
snapshots[index0][children[index0+1]]=snapshots[index0+1];
}

if(index0===0){
Object.assign(currentState,state);
currentState[nameField][children[index0]]=snapshots[index0];
updatedState=currentState;
return updatedState;
}
}
}
}
}
}
}else{
Object.assign(currentState,state);
return currentState;
}
};
};exports.updateValue=updateValue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64, 
