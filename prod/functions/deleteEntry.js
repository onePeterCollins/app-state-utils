"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.deleteEntry = void 0;var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof")); /**
 * @author Peter Collins - https://github.com/onepetercollins
 * 
 * @fileoverview : Exports a function: deleteEntry(state, payload)
 * 
 * @function deleteEntry : For state drilling and surgical deletion of object [key: value] pairs.
 *                         This function can be used to dynamically delete infinitely nested object entries.
 *                         It takes current state and a payload object as arguments.
 *                         It returns a local function which returns updated state.
 * 
 * @param   {Object}   state The object to be mutated.
 * @param   {Object}   payload { name: String, child: Array }
 * @param   {String}   payload.name Name of the [key: value] pair to be deleted or second object in the nesting hieriarchy.
 * @param   {Array}    payload.child Array of strings pointing to the nested [key: value] pair to be deleted.
 * @returns {Function} (local function) (payload) => : The new app state, or current state if it was not altered.
 */

var deleteEntry = function deleteEntry(state, payload) {

  /**
   * @param   {Object} payload { name: String, child: Array }
   * @param   {String} payload.name Name of the [key: value] pair to be deleted or second object in the nesting hieriarchy.
   * @param   {Array}  payload.child Array of strings pointing to the nested [key: value] pair to be deleted.
   * @returns {Object} { updatedState } : The new app state, or current state if it was not altered.
   */

  return function () {var payloadInherited = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : payload;
    var currentState = JSON.parse(JSON.stringify(state));
    var updatedState = null;
    var name = payloadInherited.name,child = payloadInherited.child;
    var nameField = name;
    var children = child;
    var testArray = state ? Array.from(state) : null;
    var snapshots = [];

    if ((0, _typeof2["default"])(state) !== 'object' || state[state.length - 1] === testArray.pop() && typeof testArray.pop() !== "undefined") {
      console.error("[state] must be a valid javascript object");
      return state;
    }

    if ((0, _typeof2["default"])(children) === "object") /* check if 'children' is an empty array and nullify it */{
        if (children.length === 0 && typeof children[children.length - 1] === "undefined") {
          children = null;
        }
      }

    if (!children && !currentState.hasOwnProperty(nameField)) {
      console.error("The referenced property '".concat(nameField, "' does not exist in current state."));
      return state;
    }

    if (!children && currentState.hasOwnProperty(nameField)) {
      updatedState = {};

      if (Object.keys(currentState).length > 1) {
        for (var index = 0; index < Object.keys(currentState).length; index++) {
          if (Object.keys(currentState)[index] !== nameField) {
            updatedState[Object.keys(currentState)[index]] = Object.values(currentState)[index];
            return updatedState;
          }
        }
      } else {
        return updatedState;
      }
    } else if (children.length && currentState.hasOwnProperty(nameField)) {
      for (var _index = 0; _index < children.length; _index++) {
        if (!snapshots.length) {
          if (_index !== children.length - 1) {
            snapshots.push(currentState[nameField][children[_index]]);
          } else {
            var mutatedObject = {};

            for (var index0 = 0; index0 < Object.keys(currentState[nameField]).length; index0++) {
              if (Object.keys(currentState[nameField])[index0] !== children[children.length - 1]) {
                mutatedObject[Object.keys(currentState[nameField])[index0]] = currentState[nameField][Object.keys(currentState[nameField])[index0]];
              }

              if (index0 === Object.keys(currentState[nameField]).length - 1) {
                Object.assign(currentState, state);
                currentState[nameField] = mutatedObject;
                updatedState = currentState;
                return updatedState;
              }
            }
          }
        } else {
          if (_index === children.length - 1) {
            var _mutatedObject = {};

            for (var _index2 = 0; _index2 < Object.keys(snapshots[snapshots.length - 1]).length; _index2++) {
              if (Object.keys(snapshots[snapshots.length - 1])[_index2] !== children[children.length - 1]) {
                if (typeof snapshots[snapshots.length - 1][children[_index]] !== "undefined") {
                  _mutatedObject[Object.keys(snapshots[snapshots.length - 1])[_index2]] = snapshots[snapshots.length - 1][Object.keys(snapshots[snapshots.length - 1])[_index2]];
                } else if (typeof snapshots[snapshots.length - 1][children[_index]] === "undefined") {
                  console.log("The referenced property '".concat(children[_index], "' does not exist in current state."));
                  return state;
                }
              }

              if (_index2 === Object.keys(snapshots[snapshots.length - 1]).length - 1) {
                snapshots[snapshots.length - 1] = _mutatedObject;
              }
            }

            for (var _index3 = snapshots.length - 1; _index3 >= 0; _index3--) {
              if (_index3 < snapshots.length - 1) {
                snapshots[_index3][children[_index3 + 1]] = snapshots[_index3 + 1];
              }

              if (_index3 === 0) {
                Object.assign(currentState, state);
                currentState[nameField][children[_index3]] = snapshots[_index3];
                updatedState = currentState;
                return updatedState;
              }
            }
          } else {
            if ((0, _typeof2["default"])(snapshots[snapshots.length - 1][children[_index]]) === "object" && typeof snapshots[snapshots.length - 1][children[_index]] !== "undefined") {
              snapshots.push(snapshots[snapshots.length - 1][children[_index]]);
            } else if (typeof snapshots[snapshots.length - 1][children[_index]] === "undefined") {
              console.log("The referenced property '".concat(children[_index], "' does not exist in current state."));
              return state;
            }
          }
        }
      }
    } else {
      console.log("The referenced property '".concat(nameField, "' does not exist in current state."));
      return state;
    }
  };
};exports.deleteEntry = deleteEntry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64, 
